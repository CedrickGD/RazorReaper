@page "/game"
@using System.Diagnostics
@using System.Runtime.InteropServices
@using Microsoft.JSInterop
@using RazorReaper.Components.Shared

@inject IJSRuntime JSRuntime

<div class="app-container">
    <RazorReaper.Components.Shared.SharedNavbar />

    <main class="main-content">
        <header class="page-header">
            <h1 class="page-title">Game Management</h1>
            <p class="page-subtitle">Control & Monitor ARK: Survival Evolved</p>
        </header>

        <div class="content-card">
            <div class="game-status">
                <div class="status-indicator">
                    <div class="status-dot @(isGameRunning ? "online" : "offline")"></div>
                    <div class="status-info">
                        <h3>ARK: Survival Evolved</h3>
                        <span class="status-text">@(isGameRunning ? "Running" : "Not Running")</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="content-card">
            <div class="game-actions">
                <button class="game-btn primary" @onclick="LaunchGame" disabled="@isGameRunning">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polygon points="5 3 19 12 5 21 5 3" />
                    </svg>
                    Launch Game
                </button>

                <button class="game-btn danger" @onclick="CloseGame" disabled="@(!isGameRunning)">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                        <line x1="9" y1="9" x2="15" y2="15" />
                        <line x1="15" y1="9" x2="9" y2="15" />
                    </svg>
                    Close Game
                </button>

                <button class="game-btn success" @onclick="ExecuteReconnect" disabled="@(!isGameRunning)">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c2.35 0 4.48.9 6.07 2.38" />
                        <polyline points="21 4 21 12 13 12" />
                    </svg>
                    Reconnect
                </button>

                <button class="game-btn warning" @onclick="ExecuteDisconnect" disabled="@(!isGameRunning)">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M18.36 6.64a9 9 0 1 1-12.73 0" />
                        <line x1="12" y1="2" x2="12" y2="12" />
                    </svg>
                    Disconnect
                </button>

                <button class="game-btn info" @onclick="ExecuteDebugStructures" disabled="@(!isGameRunning)">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                    </svg>
                    debugstructures
                </button>
            </div>
        </div>

    </main>
</div>

<style>
    /* Game Status Section */
    .game-status {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem 0;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 1.5rem;
    }

    .status-dot {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        position: relative;
        flex-shrink: 0;
    }

        .status-dot.online {
            background: var(--accent-green);
            box-shadow: 0 0 20px rgba(16, 185, 129, 0.6);
        }

        .status-dot.offline {
            background: var(--accent-red);
            box-shadow: 0 0 20px rgba(239, 68, 68, 0.6);
        }

        .status-dot::after {
            content: '';
            position: absolute;
            top: -6px;
            left: -6px;
            right: -6px;
            bottom: -6px;
            border-radius: 50%;
            border: 2px solid currentColor;
            opacity: 0;
            animation: pulse 2s infinite;
        }

        .status-dot.online::after {
            color: var(--accent-green);
        }

        .status-dot.offline::after {
            color: var(--accent-red);
        }

    .status-info h3 {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 0.5rem 0;
    }

    .status-text {
        color: var(--text-secondary);
        font-size: 1rem;
        font-weight: 500;
    }

    /* Game Action Buttons */
    .game-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .game-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        padding: 1rem 1.5rem;
        border: none;
        border-radius: 12px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--text-primary);
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-weight: 600;
        font-size: 0.9rem;
        position: relative;
        overflow: hidden;
    }

        .game-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .game-btn:hover::before {
            left: 100%;
        }

        .game-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .game-btn:disabled {
            opacity: 0.4;
            cursor: not-allowed;
            transform: none !important;
        }

        .game-btn.primary {
            border-color: rgba(255, 255, 255, 0.3);
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
        }

            .game-btn.primary:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));
                border-color: rgba(255, 255, 255, 0.5);
                box-shadow: 0 8px 25px rgba(255, 255, 255, 0.2);
            }

        .game-btn.success {
            border-color: rgba(16, 185, 129, 0.3);
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
        }

            .game-btn.success:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(16, 185, 129, 0.2), rgba(16, 185, 129, 0.1));
                border-color: var(--accent-green);
                box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
                color: var(--accent-green);
            }

        .game-btn.warning {
            border-color: rgba(245, 158, 11, 0.3);
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.05));
        }

            .game-btn.warning:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(245, 158, 11, 0.2), rgba(245, 158, 11, 0.1));
                border-color: var(--accent-orange);
                box-shadow: 0 8px 25px rgba(245, 158, 11, 0.4);
                color: var(--accent-orange);
            }

        .game-btn.danger {
            border-color: rgba(239, 68, 68, 0.3);
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
        }

            .game-btn.danger:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(239, 68, 68, 0.2), rgba(239, 68, 68, 0.1));
                border-color: var(--accent-red);
                box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
                color: var(--accent-red);
            }

        .game-btn.info {
            border-color: rgba(59, 130, 246, 0.3);
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05));
        }

            .game-btn.info:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(59, 130, 246, 0.1));
                border-color: var(--accent-blue);
                box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
                color: var(--accent-blue);
            }

        .game-btn svg {
            width: 20px;
            height: 20px;
            transition: transform 0.3s ease;
        }

        .game-btn:hover:not(:disabled) svg {
            transform: scale(1.1);
        }
</style>

@code {
    // Windows API imports
    private const int SW_RESTORE = 9;
    private const uint KEYEVENTF_KEYUP = 0x0002;
    private const uint VK_TAB = 0x09;
    private const uint VK_RETURN = 0x0D;

    [DllImport("user32.dll")]
    private static extern bool SetForegroundWindow(IntPtr hWnd);
    [DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    [DllImport("user32.dll")]
    private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, UIntPtr dwExtraInfo);
    [DllImport("user32.dll")]
    private static extern IntPtr GetForegroundWindow();

    // Component state
    private bool isGameRunning = false;
    private Timer? statusTimer;

    protected override void OnInitialized()
    {
        CheckGameStatus();
        // Check game status every 5 seconds
        statusTimer = new Timer(async _ =>
        {
            CheckGameStatus();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private void CheckGameStatus()
    {
        Process[] processes = Process.GetProcessesByName("ShooterGame");
        isGameRunning = processes.Length > 0;
    }

    private async Task ExecuteReconnect()
    {
        await ExecuteGameCommand("reconnect");
    }

    private async Task ExecuteDisconnect()
    {
        await ExecuteGameCommand("disconnect");
    }

    private async Task ExecuteDebugStructures()
    {
        await ExecuteGameCommand("debugstructures");
    }

    private async Task ExecuteGameCommand(string command)
    {
        try
        {
            Process[] processes = Process.GetProcessesByName("ShooterGame");
            if (processes.Length > 0)
            {
                IntPtr gameWindowHandle = processes[0].MainWindowHandle;

                // Bring window to foreground
                ShowWindow(gameWindowHandle, SW_RESTORE);
                await Task.Delay(100);
                SetForegroundWindow(gameWindowHandle);
                await Task.Delay(500);

                // Press TAB to open console
                keybd_event((byte)VK_TAB, 0, 0, UIntPtr.Zero);
                await Task.Delay(50);
                keybd_event((byte)VK_TAB, 0, KEYEVENTF_KEYUP, UIntPtr.Zero);
                await Task.Delay(300);

                // Send each character of the command
                foreach (char c in command.ToLower())
                {
                    SendChar(c);
                    await Task.Delay(50);
                }

                await Task.Delay(200);

                // Press Enter
                keybd_event((byte)VK_RETURN, 0, 0, UIntPtr.Zero);
                await Task.Delay(50);
                keybd_event((byte)VK_RETURN, 0, KEYEVENTF_KEYUP, UIntPtr.Zero);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "ARK: Survival Evolved is not running!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }

        StateHasChanged();
    }

    private void SendChar(char c)
    {
        byte vk = (byte)char.ToUpper(c);
        keybd_event(vk, 0, 0, UIntPtr.Zero);
        keybd_event(vk, 0, KEYEVENTF_KEYUP, UIntPtr.Zero);
    }

    private async Task LaunchGame()
    {
        try
        {
            Process.Start(new ProcessStartInfo
            {
                FileName = "steam://rungameid/346110",
                UseShellExecute = true
            });

            await Task.Delay(5000);
            CheckGameStatus();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error launching game: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task CloseGame()
    {
        try
        {
            Process[] processes = Process.GetProcessesByName("ShooterGame");
            foreach (var process in processes)
            {
                process.Kill();
                process.WaitForExit(5000);
            }

            CheckGameStatus();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error closing game: {ex.Message}");
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        statusTimer?.Dispose();
    }
}