@page "/ini-changer"
@using Microsoft.Win32
@using RazorReaper.Components.Shared

<div class="app-container">
    <RazorReaper.Components.Shared.SharedNavbar />

    <main class="main-content">
        <header class="page-header">
            <h1 class="page-title">INI Changer</h1>
            <p class="page-subtitle">Manage & Modify INI Configuration File</p>
        </header>

        <div class="ini-layout">

            <div class="content-card ini-operations-panel">
                <h3 class="mb-3 text-white">File Operations</h3>

                <div class="file-operations">
                    <button class="ini-btn primary" @onclick="OpenIniFile">
                        <svg fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                        Open INI File
                    </button>

                    <button class="ini-btn danger" @onclick="ClearFile">
                        <svg fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd" />
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                        Clear File
                    </button>

                    <button class="ini-btn warning" @onclick="CheckIniFileExists">
                        <svg fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                        </svg>
                        Check INI Path
                    </button>

                    <button class="ini-btn success save-changes-btn" @onclick="SaveChanges">
                        <svg fill="currentColor" viewBox="0 0 20 20">
                            <path d="M7.707 10.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V6h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V8a2 2 0 012-2h5v5.586l-1.293-1.293zM9 4a1 1 0 012 0v2H9V4z" />
                        </svg>
                        Save Changes
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="ini-status-message @GetStatusClass()">
                        <div class="status-content">
                            @if (isPathStatus && !string.IsNullOrEmpty(currentPath))
                            {
                                <div style="font-weight: 600; margin-bottom: 0.5rem;">@GetStatusTitle()</div>
                                <div class="path-info-display">
                                    @currentPath
                                </div>
                            }
                            else
                            {
                                <div>@statusMessage</div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="ini-main-column">

                <div class="content-card">
                    <h3 class="mb-3">Preset INI Configurations</h3>

                    <div class="presets-grid">
                        @foreach (var preset in iniPresets)
                        {
                            <button class="preset-button @(selectedPreset == preset.Name ? "active" : "")"
                                    @onclick="() => SelectPreset(preset)">
                                <div class="preset-info">
                                    <div class="preset-name">@preset.Name</div>
                                    <div class="preset-description">@preset.Description</div>
                                </div>
                            </button>
                        }
                    </div>
                </div>

                <div class="content-card ini-content-area">
                    <h3 class="mb-3">INI File Content</h3>
                    <textarea @bind="currentIniContent"
                              class="ini-textarea"
                              placeholder="INI file content will appear here..."></textarea>
                </div>

                <div class="content-card">
                    <div class="images-header">
                        <h3>Configuration Previews</h3>
                        <button class="images-toggle-btn" @onclick="ToggleImages">
                            @(showImages ? "▼" : "▶")
                        </button>
                    </div>

                    @if (showImages)
                    {
                        <div class="images-grid">
                            @foreach (var preset in iniPresets)
                            {
                                <div class="image-item">
                                    <div class="image-preview">
                                        <img src="@GetPresetImagePath(preset.Name)" alt="@preset.Name" />
                                    </div>
                                    <div class="image-name">@preset.Name</div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </main>
</div>

@code {
    private string currentIniContent = "";
    private string statusMessage = "";
    private string selectedPreset = "";
    private string currentPath = "";
    private bool isPathStatus = false;
    private bool showImages = false;
    private StatusType currentStatusType = StatusType.Info;

    private enum StatusType
    {
        Success,
        Error,
        Warning,
        Info
    }

    private List<IniPreset> iniPresets = new List<IniPreset>
    {
        new IniPreset { Name = "Default", Description = "Standard Game Configuration", Content = @"" },
        new IniPreset { Name = "Farming", Description = "Gen2 Optimized", Content = @"" },
        new IniPreset { Name = "Snow North", Description = "Clear Water, 180 Fps Cap", Content = @"" },
        new IniPreset { Name = "Black Super Hard", Description = "Nigga Config", Content = @"" },
        new IniPreset { Name = "Bloodstalker", Description = "Awesome Spyglass On", Content = @"" },
        new IniPreset { Name = "Super Hard", Description = "No Visals, No Water", Content = @"" },
        new IniPreset { Name = "PVP Water", Description = "No Water Surface", Content = @"" },
        new IniPreset { Name = "PVP Soft", Description = "Standard Pvp Config", Content = @"" },
        new IniPreset { Name = "PVP Hard", Description = "Minimal Visuals, Fogless", Content = @"" },
        new IniPreset { Name = "Creator Config", Description = "Best For Content", Content = @"" }
    };

    private string GetPresetImagePath(string presetName)
    {
        return $"images/presets/{presetName.ToLower().Replace(" ", "-")}.jpg";
    }

    private void ToggleImages()
    {
        showImages = !showImages;
    }

    private string GetStatusClass()
    {
        return currentStatusType switch
        {
            StatusType.Success => "status-success",
            StatusType.Error => "status-error",
            StatusType.Warning => "status-warning",
            StatusType.Info => "status-info",
            _ => "status-info"
        };
    }

    private string GetStatusTitle()
    {
        return currentStatusType switch
        {
            StatusType.Success => "✅ INI File Found",
            StatusType.Error => "❌ INI File Not Found",
            StatusType.Warning => "⚠️ Steam Path Issue",
            _ => "ℹ️ Path Information"
        };
    }

    private void SetStatus(string message, StatusType type, bool isPath = false, string path = "")
    {
        statusMessage = message;
        currentStatusType = type;
        isPathStatus = isPath;
        currentPath = path;
        StateHasChanged();
    }

    private void OpenIniFile()
    {
        try
        {
            string? iniPath = ArkUtilities.GetBaseDeviceProfilesPath();

            if (iniPath == null)
            {
                SetStatus("Steam installation not found in registry.", StatusType.Error);
                return;
            }

            if (!File.Exists(iniPath))
            {
                SetStatus("INI file does not exist. Create it first using the 'Create New' button.", StatusType.Warning);
                return;
            }

            currentIniContent = File.ReadAllText(iniPath);
            SetStatus("INI file loaded successfully.", StatusType.Success);
        }
        catch (Exception ex)
        {
            SetStatus($"Error loading INI file: {ex.Message}", StatusType.Error);
        }
    }

    private void ClearFile()
    {
        try
        {
            string? iniPath = ArkUtilities.GetBaseDeviceProfilesPath();

            if (iniPath == null)
            {
                SetStatus("Steam installation not found in registry.", StatusType.Error);
                return;
            }

            currentIniContent = "";
            File.WriteAllText(iniPath, currentIniContent);

            selectedPreset = "";
            SetStatus("INI file content cleared successfully.", StatusType.Success);
        }
        catch (Exception ex)
        {
            SetStatus($"Error clearing INI file: {ex.Message}", StatusType.Error);
        }
    }

    private void SelectPreset(IniPreset preset)
    {
        selectedPreset = preset.Name;
        showImages = false;
        currentIniContent = preset.Content;
        SetStatus($"Selected preset: {preset.Name}", StatusType.Success);
    }

    private void SaveChanges()
    {
        try
        {
            string? iniPath = ArkUtilities.GetBaseDeviceProfilesPath();

            if (iniPath == null)
            {
                SetStatus("Steam installation not found in registry.", StatusType.Error);
                return;
            }

            var directory = Path.GetDirectoryName(iniPath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory!);
            }

            File.WriteAllText(iniPath, currentIniContent);
            SetStatus("INI file saved successfully!", StatusType.Success);
        }
        catch (Exception ex)
        {
            SetStatus($"Error saving INI file: {ex.Message}", StatusType.Error);
        }
    }

    private void CheckIniFileExists()
    {
        try
        {
            string? iniPath = ArkUtilities.GetBaseDeviceProfilesPath();

            if (iniPath == null)
            {
                SetStatus("Steam installation not found in registry. Please ensure Steam is properly installed.", StatusType.Error, true, "Registry path not found");
                return;
            }

            if (!File.Exists(iniPath))
            {
                SetStatus("INI file not found at the expected location.", StatusType.Warning, true, iniPath);
            }
            else
            {
                var fileInfo = new FileInfo(iniPath);
                var fileSize = fileInfo.Length;
                var lastModified = fileInfo.LastWriteTime;

                SetStatus($"File exists • Size: {fileSize} bytes • Modified: {lastModified:yyyy-MM-dd HH:mm}", StatusType.Success, true, iniPath);
            }
        }
        catch (Exception ex)
        {
            SetStatus($"Error checking INI file: {ex.Message}", StatusType.Error);
        }
    }

    public class IniPreset
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Content { get; set; } = "";
    }
}